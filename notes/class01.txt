Annotations:
         1. @Test   - Marks a class or a method as part of the test.
         2. @BeforeMethod - The annotated method will be run before each test method.
         3. @AfterMethod -The annotated method will be run after each test method.

        @BeforeMethod  --> pre condition (Ex: set up driver)
        @Test
        @AfterMethod  --> post condition (Ex: close the driver)

        @BeforeMethod
        @Test
        @AfterMethod

EnableDisable:
          @Test(enabled = false) temporarily disables a test method without removing it from the codebase
Priority:
         @Test(priority= index) - Priority is an attribute that tells TestNG which order the tests need to follow.
         Starts from index=0 (Highest priority)

DependsOnMethod:
         @Test(dependsOnMethods = {""}) annotation attribute allows a test method to depend on the successful execution of another test method.

Assertions:
         1. Assert.assertEquals(actual,expected)
         2. Assert.assertTrue()
         Assertions are lines of code that verify if a test has passed or failed by comparing the actual and expected results.
         They are placed in the test method and act as checkpoints to ensure the test is running as expected.

-------------------------------- NOTES from the class
Annotations:

1.@Test:
All the test cases must be written down under the annotation of @Test.


whenever u run a class , it is going to execute each and every method under the annotation of
@Test.

by default @Test annotation follows alphabetical order of execution of the test cases

e.g public void aTestCase(); --> will execute first
    public void bTestCase();-->will execute second

    the green tick indicates that test case has passed
    the red sign indicates the test case has failed



@BeforeMethod annotation:

the code under this annotation is going to execute everytime before each and every @Test execution is made



@AfterMethod annotation :

the code under this annotation is going to execute after every test Method (after every @TEST)


Assertions:
we are not using if else condition because even if the test case fails (i.e the condition doesn't pass in if)
the testNG will still show it has passed
in order to overcome that we use
Assertions from testNG
the library is Assert
and we call different types of assertions from it

first assertion that we learned is
1.Assert.AssertEquals(String , String)
it compares two strings if they are equal test case passed else fails.

2.Assert.AssetTrue(boolean)-->if the boolean is True the Assertion will pass
								if the boolean is false the assertion will fail